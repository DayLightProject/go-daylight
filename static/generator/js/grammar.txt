{
  function optionalList(value) {
    return value !== null ? value : [];
  }
  
  function extractOptional(optional, index) {
    return optional ? optional[index] : null;
  }
  
  function extractList(list, index) {
    return list.map(function(element) { return element[index]; });
  }
  
  function buildList(head, tail, index) {
    console.log("buildList", head, tail, index);
    return [head].concat(extractList(tail, index));
  }
  
  function parseArrayParamsToObject(params, paramsObj) {
  	var i = 0;
    for(var paramName in paramsObj) {
    	if (paramsObj.hasOwnProperty(paramName)) {
        	if(params && typeof params[i] != "undefined")
    			paramsObj[paramName] = params[i];
            i++;
    	}
    }
  }
  
  function arrayToNamedObject(arr) {
    var obj = {};
    if(arr && arr.length) {
      for(var i = 0; i < arr.length; i++) {
        obj[arr[i].name] = arr[i].value;
      }
    }
  	return obj;
  }
  
  function generateId() {
     return "tag_" + (10000000 + Math.floor(Math.random() * 89999999));
  }
}

Start
  = __ template:Template __ { return template; }

SourceCharacter
  = .
  
WhiteSpace "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)*  
__
  = (WhiteSpace / LineTerminatorSequence / Comment)*
  
_
  = (WhiteSpace / MultiLineCommentNoLineTerminator)*  
  
Template
  = body:SourceElements? {
      return {
        type: "Template",
        body: optionalList(body)
      };
    }
    
SourceElements
  = head:SourceElement tail:(__ SourceElement)* {
      return buildList(head, tail, 1);
    }

SourceElement
  = Statement  
  
Statement
  = Tags
  / IfBlock
  / FunctionStr  
  
Tags
  = A
  / Div
  / Divs
  / P
  / Em
  / Small
  / Span
  / Strong
  / Label
  / Legend
  / Tag
  / Image
  / ImageInput
  / MarkDown
  / UList
  / Form
  / Input
  / Textarea
  / InputAddress
  / InputDate
  / InputMoney
  / Select
  / Source

NoSpaceArgument
  = str:[a-zA-Zа-€ј-я0-9\-_\./]* { return str.join(""); }

Argument
  = body:Expression {
  		return body;
  	  return body.join ? body.join("") : body;      
    }
  
//  / str:[a-zA-Zа-€ј-я0-9-\_:/\./ ]* { return str.join(""); }  

Arguments
  = "(" __ args:(ArgumentList __)? ")" {
      return optionalList(extractOptional(args, 0));
    }

ArgumentList
  = head:Argument tail:(__ "," __ Argument)* {
      return buildList(head, tail, 3);
    }
    
NamedArgument
  = name:[a-zA-Z0-9]+ _ "=" _ str:Expression { return { name: name.join(""), value: str }; }
//  = name:[a-zA-Z0-9]+ _ "=" _ '"' str:[^\"]* '"' { return { name: name.join(""), value: str.join("") }; }
//  / name:[a-zA-Z0-9]+ _ "=" _ '``' str:[^\`]* '``' { return { name: name.join(""), value: str.join("") }; }
//  / name:[a-zA-Z0-9]+ _ "=" _ str:[^\},"`]* { return { name: name.join(""), value: str.join("") }; }
//  / name:[a-zA-Z0-9]+ _ "=" _ str:Expression { return { name: name.join(""), value: str }; }
////  / str:[a-zA-Zа-€ј-я0-9-\_:/\./ ]* { return str.join(""); }      

NamedArguments //именованные аргументы func{class=big, text=hello}
  = "{" __ args:(NamedArgumentList __)? "}" {
      return optionalList(extractOptional(args, 0));
    }

NamedArgumentList
  = head:NamedArgument tail:(__ "," __ NamedArgument)* {
      return arrayToNamedObject(buildList(head, tail, 3));
    }

Expression
 = FunctionStr
 / Variable
 / Constant

FunctionStr
 = _ str:Function _ {
	//return str;
    return str.join ? str.join("") : str;
    
}

Function
 = If
  / And
  / Or
  / CmpTime
  / Mult
  / Trim
  / Address
  / Money
  / Date
  / DateTime
  / Now
  / GetVar
  / SetVar

Constant
  = '"' str:[^\"]* '"' { return str.join(""); }
  / '``' str:[^\`]* '``' { return str.join(""); }
  / str:[^\(\),"`]* { return str.join(""); }

Variable
 = '#' str:[a-zA-Z-0-9_]+ '#' { return "#" + str.join("") + "#"; }

If
 = 'If(' _ Expression _ ',' _ Expression _ ',' _ Expression _ ')'

And
 = 'And(' exp:Expression _ args:(',' _ Expression)* ')' {
 	//return 'And(' + exp + args.join("") + ')';
    //return 'And(' + exp + args.join("") + ')';
    return'And(' + buildList(exp, args, 2) + ')';
    //return args.join("?");
    //return args;
 }
 
Or
 = 'Or(' exp:Expression _ args:(',' _ Expression)* ')' {
 	return'Or(' + buildList(exp, args, 2) + ')';    
 } 
 
CmpTime
 = 'CmpTime(' _ Expression _ ',' _ Expression _ ')'
 
Mult
 = 'Mult(' _ Expression _ ',' _ Expression _ ')'

Trim
 = 'Trim(' _ Expression _ ')'

Address
 = 'Address(' _ Expression _ ')'

Money
 = 'Money(' _ Expression _ ')'
 
Date
 = 'Date(' exp:Expression _ args:(',' _ Expression)* ')' {
 	return'Date(' + buildList(exp, args, 2) + ')';    
 } 
 
DateTime
 = 'DateTime(' exp:Expression _ args:(',' _ Expression)* ')' {
 	return'DateTime(' + buildList(exp, args, 2) + ')';    
 } 
 
Now
 = 'Now(' exp:Expression _ args:(',' _ Expression)* ')' {
 	return'Now(' + buildList(exp, args, 2) + ')';    
 } 

GetVar
 = 'GetVar(' _ Expression _ ')'

SetVar
 = 'SetVar(' _ args:NamedArgument _ ')' {
 	return 'SetVar(' + args.name + "=" + args.value + ')'
    }


A
  = "A:" param:NoSpaceArgument { 
      return {
        type: "tag",
        name: "A",
        id: generateId(),
        params: { "class": param }
      }
    }
  / "A" params:Arguments  { 
    var paramsObj = {      
      "class": null,
      "text": null,
      "href": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "A",
        id: generateId(),
        params: paramsObj      
    } 
  } 
  / "A" params:NamedArguments {
  	return {
        type: "tag",
        name: "A",
        id: generateId(),
        params: params    
    } 
  }

Div
  = "Div" params:Arguments  {
    
    var paramsObj = {
      "class": null,
      "text": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Div",
        id: generateId(),
        params: paramsObj
      }
  } 
  / "Div" params:NamedArguments {
  	return {
        type: "tag",
        name: "Div",
        id: generateId(),
        params: params    
    } 
  }  
 
Divs
  = "Divs" params:Arguments __ body:SourceElements? __ "DivsEnd:" {   
    return {
      type: "tag",
      name: "Divs",
      id: generateId(),
      params: { "nestedClassList": params },
      body: optionalList(body)
    }       
  }

P
  = "P" params:Arguments  { 
    var paramsObj = {      
      "class": null,
      "text": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "P",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "P" params:NamedArguments {
  	return {
        type: "tag",
        name: "P",
        id: generateId(),
        params: params    
    } 
  }
  
Em
  = "Em" params:Arguments  { 
    var paramsObj = {      
      "class": null,
      "text": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Em",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Em" params:NamedArguments {
  	return {
        type: "tag",
        name: "Em",
        id: generateId(),
        params: params    
    } 
  }

Small
  = "Small" params:Arguments  { 
    var paramsObj = {      
      "class": null,
      "text": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Small",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Small" params:NamedArguments {
  	return {
        type: "tag",
        name: "Small",
        id: generateId(),
        params: params    
    } 
  }
  
Span
  = "Span" params:Arguments  { 
    var paramsObj = {      
      "class": null,
      "text": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Span",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Span" params:NamedArguments {
  	return {
        type: "tag",
        name: "Span",
        id: generateId(),
        params: params    
    } 
  }
  
Strong
  = "Strong" params:Arguments  { 
    var paramsObj = {      
      "class": null,
      "text": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Strong",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Strong" params:NamedArguments {
  	return {
        type: "tag",
        name: "Strong",
        id: generateId(),
        params: params    
    } 
  }  

Label
  = "Label:" param:NoSpaceArgument { 
      return {
        type: "tag",
        name: "Label",
        id: generateId(),
        params: { "text": param }
      }
    }
  / "Label" params:Arguments  {
    
    var paramsObj = {
      "text": null,      
      "class": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Label",
        id: generateId(),
        params: paramsObj
      }
  } 
  / "Label" params:NamedArguments {
  	return {
        type: "tag",
        name: "Label",
        id: generateId(),
        params: params    
    } 
  }
  
Legend
  = "Legend" params:Arguments  { 
    var paramsObj = {      
      "class": null,
      "text": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Legend",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Legend" params:NamedArguments {
  	return {
        type: "tag",
        name: "Legend",
        id: generateId(),
        params: params    
    } 
  }   
  
Tag
  = "Tag:" param:NoSpaceArgument { 
      return {
        type: "tag",
        name: "Tag",
        id: generateId(),
        params: { "tagname": param }
      }
    }
  / "Tag" params:Arguments  {
    
    var paramsObj = {
      "tagname": null,
      "text": null,      
      "class": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Tag",
        id: generateId(),
        params: paramsObj
      }
  } 
  / "Tag" params:NamedArguments {
  	return {
        type: "tag",
        name: "Tag",
        id: generateId(),
        params: params    
    } 
  }

Image
  = "Image:" param:NoSpaceArgument { 
      return {
        type: "tag",
        name: "Image",
        id: generateId(),
        params: { "src": param }
      }
    }
  / "Image" params:Arguments  {
    
    var paramsObj = {
      "src": null,
      "alt": null,
      "class": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Image",
        id: generateId(),
        params: paramsObj
      }
  } 
  / "Image" params:NamedArguments {
  	return {
        type: "tag",
        name: "Image",
        id: generateId(),
        params: params    
    } 
  }
  
ImageInput
  = "ImageInput:" param:NoSpaceArgument { 
      return {
        type: "tag",
        name: "ImageInput",
        id: generateId(),
        params: { "tagname": param }
      }
    }
  / "ImageInput" params:Arguments  {
    
    var paramsObj = {
      "id": null,
      "width": null,      
      "ratio_height": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "ImageInput",
        id: generateId(),
        params: paramsObj
      }
  } 
  / "ImageInput" params:NamedArguments {
  	return {
        type: "tag",
        name: "ImageInput",
        id: generateId(),
        params: params    
    } 
  }  
  
MarkDown
  = "MarkDown:" param:NoSpaceArgument { 
      return {
        type: "tag",
        name: "MarkDown",
        id: generateId(),
        params: { "text": param }
      }
    }
  / "MarkDown" params:Arguments  {
    
    var paramsObj = {
      "text": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "MarkDown",
        id: generateId(),
        params: paramsObj
      }
  } 
  / "MarkDown" params:NamedArguments {
  	return {
        type: "tag",
        name: "MarkDown",
        id: generateId(),
        params: params    
    } 
  } 

UList
  = "UList" params:Arguments __ body:LiElements? __ "UListEnd:" {   
    var paramsObj = {
      "class": null,
      "ol": null,
      "liClass": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
      type: "tag",
      name: "UList",
      id: generateId(),
      params: paramsObj,
      body: optionalList(body)
    }       
  }
  / "UList" params:NamedArguments __ body:LiElements? __ "UListEnd:" {
  	return {
        type: "tag",
        name: "UList",
        id: generateId(),
        params: params,
        body: optionalList(body)
    }
  }
  
LiElements
  = head:LiElement tail:(__ LiElement)* {
      return buildList(head, tail, 1);
    }

LiElement
  = Li
  / LiBegin

Li
  = "Li:" param:NoSpaceArgument { 
      return {
        type: "tag",
        name: "Li",
        id: generateId(),
        params: { "text": param }
      }
    }
  / "Li" params:Arguments  {
    
    var paramsObj = {
      "text": null,      
      "class": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Li",
        id: generateId(),
        params: paramsObj
      }
  } 
  / "Li" params:NamedArguments {
  	return {
        type: "tag",
        name: "Li",
        id: generateId(),
        params: params    
    } 
  }
  
LiBegin
  = "LiBegin" params:Arguments __ body:SourceElements? __ "LiEnd:" {
    var paramsObj = {      
      "class": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
      type: "tag",
      name: "LiBegin",
      id: generateId(),
      params: paramsObj,
      body: optionalList(body)
    }       
  }
  / "LiBegin" params:NamedArguments __ body:SourceElements? __ "LiEnd:" {
    
    return {
      type: "tag",
      name: "LiBegin",
      id: generateId(),
      params: params,
      body: optionalList(body)
    }       
  } 
  / "LiBegin:" param:NoSpaceArgument __ body:SourceElements? __ "LiEnd:" {
    
    return {
      type: "tag",
      name: "LiBegin",
      id: generateId(),
      params: { class: param },
      body: optionalList(body)
    }       
  }  

Form
  = "Form" params:Arguments __ body:SourceElements? __ "FormEnd:" { 
    var paramsObj = {      
      "class": null      
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Form",
        id: generateId(),
        params: paramsObj,
        body: optionalList(body)
      }
    } 
  / "Form" params:NamedArguments __ body:SourceElements? __ "FormEnd:" {
  	return {
        type: "tag",
        name: "Form",
        id: generateId(),
        params: params,
        body: optionalList(body)
    } 
  }

Input
  = "Input" params:Arguments  { 
    var paramsObj = {      
      "idname": null,
      "class": null,
      "placeholder": null,
      "type": null,
      "value": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Input",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Input" params:NamedArguments {
  	return {
        type: "tag",
        name: "Input",
        id: generateId(),
        params: params    
    } 
  }

Textarea
  = "Textarea" params:Arguments  { 
    var paramsObj = {      
      "idname": null,
      "class": null,
      "value": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Textarea",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Textarea" params:NamedArguments {
  	return {
        type: "tag",
        name: "Textarea",
        id: generateId(),
        params: params    
    } 
  }

InputAddress
  = "InputAddress" params:Arguments  { 
    var paramsObj = {      
      "idname": null,
      "class": null,
      "value": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "InputAddress",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "InputAddress" params:NamedArguments {
  	return {
        type: "tag",
        name: "InputAddress",
        id: generateId(),
        params: params    
    } 
  }
  
InputDate
  = "InputDate" params:Arguments  { 
    var paramsObj = {      
      "idname": null,
      "class": null,
      "value": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "InputDate",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "InputDate" params:NamedArguments {
  	return {
        type: "tag",
        name: "InputDate",
        id: generateId(),
        params: params    
    } 
  }  
  
InputMoney
  = "InputMoney" params:Arguments  { 
    var paramsObj = {      
      "idname": null,
      "class": null,
      "value": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "InputMoney",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "InputMoney" params:NamedArguments {
  	return {
        type: "tag",
        name: "InputMoney",
        id: generateId(),
        params: params    
    } 
  }
  
Select
  = "Select" params:Arguments  { 
    var paramsObj = {      
      "idname": null,
      "list": null,
      "class": null,
      "value": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Select",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Select" params:NamedArguments {
  	return {
        type: "tag",
        name: "Select",
        id: generateId(),
        params: params    
    } 
  }
  
Source
  = "Source" params:Arguments  { 
    var paramsObj = {      
      "idname": null,      
      "value": null
    }
    
    parseArrayParamsToObject(params, paramsObj);
    
    return {
        type: "tag",
        name: "Source",
        id: generateId(),
        params: paramsObj
      }
    } 
  / "Source" params:NamedArguments {
  	return {
        type: "tag",
        name: "Source",
        id: generateId(),
        params: params    
    } 
  }

IfBlock
  = "If(" __ condition:Argument __ ")" __ body:SourceElements? __ "IfEnd:" {    
    
    return {
        type: "tag",
        name: "If",
        id: generateId(),
        params: {
        	condition: condition,
            else: 0,
            elseIf: 0
        },
        body: optionalList(body)
      }
  }
  
  / "If(" __ condition:Argument __ ")" __ body:SourceElements? __ "Else:" __ bodyElse:SourceElements? __ "IfEnd:" { 
        
    return {
        type: "tag",
        name: "If",
        id: generateId(),
        params: {
        	condition: condition,
            else: 1,
            elseIf: 0
        },        
        body: optionalList(body),
        bodyElse: optionalList(bodyElse)
      }
  }
  
  / "If(" __ condition:Argument __ ")" __ body:SourceElements? __ "ElseIf(" __ conditionElse:Argument __ ")" __ bodyElse:SourceElements? __ "IfEnd:" { 
    
    return {
        type: "tag",
        name: "If",
        id: generateId(),
        params: {
        	condition: condition,
            conditionElse: conditionElse,
            else: 0,
            elseIf: 1
        },
        body: optionalList(body),
        bodyElse: optionalList(bodyElse)
      }
  }  
  
/ "If(" __ condition:Argument __ ")" __ body:SourceElements? __ "ElseIf(" __ conditionElse:Argument __ ")" __ bodyElseIf:SourceElements? __ "Else:" __ bodyElse:SourceElements? __ "IfEnd:" { 
       
    return {
        type: "tag",
        name: "If",
        id: generateId(),
        params: {
        	condition: condition,
            conditionElse: conditionElse,
            else: 1,
            elseIf: 1
        },
        body: optionalList(body),
        bodyElseIf: optionalList(bodyElseIf),
        bodyElse: optionalList(bodyElse)
      }
  }    

/*
/ "If(" __ condition:Argument __ ")" __ body:SourceElements? __ else_:("ElseIf(" __ conditionElse:Argument __ ")" __ bodyElse:SourceElements? __ )* "IfEnd:" { 
    var paramsObj = {      
      "condition": null      
    }   
    
    
    return {
        type: "condition",
        name: "If",
        id: generateId(),
        condition: condition,
        conditionElse: else_,
        body: optionalList(body),
        //bodyElse: optionalList(bodyElse)
      }
  }   
  */

-----------------

{
   "type": "Template",
   "body": [
      {
         "type": "tag",
         "name": "a",
         "params": {
            "class": "href = http",
            "text": null,
            "href": null
         }
      },
      {
         "type": "tag",
         "name": "p",
         "params": {
            "class": "b-green",
            "text": "“екс абзаца"
         }
      },
      {
         "type": "tag",
         "name": "p",
         "params": {
            "class": "b-green",
            "text": "“екс абзаца"
         }
      },
      {
         "type": "tag",
         "name": "p",
         "params": {
            "text": "ѕривет! проверка",
            "class": "big"
         }
      },
      {
         "type": "tag",
         "name": "img",
         "params": {
            "src": "/img/logo.png"
         }
      },
      {
         "type": "tag",
         "name": "img",
         "params": {
            "src": "http://egaas.org/logo.png",
            "alt": "логотип",
            "class": "b-small"
         }
      },
      {
         "type": "tag",
         "name": "img",
         "params": {
            "src": "http://egaas.org/logo.png",
            "alt": "логотип",
            "class": "b-small b-right data-title=test"
         }
      },
      {
         "type": "tag",
         "name": "a",
         "params": {
            "class": "b-big",
            "text": "тект ссылки",
            "href": "http://ya.ru"
         }
      },
      {
         "type": "tag",
         "name": "a",
         "params": {
            "text": "»скать в €ндексе",
            "href": "https://yandex.ru/search",
            "class": "b-big b-info"
         }
      },
      {
         "type": "tag",
         "name": "div",
         "params": {
            "text": "kaka",
            "class": "f"
         }
      },
      {
         "type": "tag",
         "name": "divs",
         "nestedClassList": [
            "pull-left b-red",
            "b-panel"
         ],
         "body": [
            {
               "type": "tag",
               "name": "p",
               "params": {
                  "class": "b-green",
                  "text": "“екс абзаца"
               }
            },
            {
               "type": "tag",
               "name": "a",
               "params": {
                  "class": "b-big",
                  "text": "тект ссылки",
                  "href": "http://ya.ru"
               }
            }
         ]
      },
      {
         "type": "tag",
         "name": "ul",
         "params": {
            "class": "b-big",
            "ol": "ol",
            "liClass": null
         },
         "body": [
            {
               "type": "tag",
               "name": "li",
               "params": {
                  "text": "первый"
               }
            },
            {
               "type": "tag",
               "name": "li",
               "params": {
                  "text": "второй"
               }
            },
            {
               "type": "tag",
               "name": "li",
               "params": {
                  "text": "третий",
                  "class": "b-underline"
               }
            }
         ]
      }
   ]
}

----------
Divs(row)
Divs(col-xs-6)
Divs(panel panel-default, panel-body)

  P(``b-green``, “екст абзаца)
  
DivsEnd:

DivsEnd:

Divs(col-xs-6)
  Image(https://www.vectorlogo.zone/logos/getbootstrap/getbootstrap-card.png, бутстрап)

 UList(b-big, ol)
  Li:первый
  Li:второй
  Li(третий, text-danger)
  LiBegin:text-success
    A{text=»скать в €ндексе, href = "https://yaaandex.ru/search", class=pull-right}
  LiEnd:
  LiBegin(text-success)
    A{text=»скать в google, href = "https://goooogle.com/search", class=b-big b-info}

    Divs(pull-left b-red, b-panel)
    P(``b-green``, “екс абзаца)
    A(text-danger,тект ссылки, ``http://yaaa.ru``) 
    DivsEnd:
  LiEnd:

Li:привет
UListEnd:

DivsEnd:

DivsEnd:

A(bg-success,поиск в €ндекс, ``http://ya.ru``) 